/**
 * 
 */
package com.util;
import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;

/**
 * @author lixingfa
 * @date 2018年12月25日下午4:20:20
 * 
 */
public class MatrixUtil {

	
	public static void main(String[] args) {
		int[] num = {0,0,9,0,5,8,3,0,7,6,7,8,8,0,4,1,8,7,8,7,0,3,4,2,9,3,9,3,7,8,6,8,8,1,5,2,0,6,0,7,7,4,9,9,0,4,7,0,7,2,8,4,1,3,
		        0,2,0,1,5,7,2,3,9,6,4,7,8,9,1,8,5,5,4,0,1,0,9,9,2,5,8,2,6,8,4,2,1,5,8,2,1,8,6,1,0,6,6,0,4,5,3,6,0,8,2,6,6,2,
		        6,8,0,5,3,3,8,8,1,9,1,5,0,2,0,3,0,5,4,5,5,1,7,1,9,8,9,4,0,1,6,5,6,3,1,4,9,4,9,1,7,9,3,9,3,3,7,4,5,0,9,7,4,5,
		        5,3,2,7,3,6,2,2,5,3,7,6,8,5,2,0,1,2,0,4,1,9,8,7,3,8,9,3,7,3,7,8,8,6,7,3,2,6,3,6,8,0,1,8,1,5,1,0,4,9,4,9,0,9,
		        9,8,0,1,9,7,8,7,2,6,4,2,1,4,6,1,9,8,1,4,7,0,9,8,1,5,1,3,9,5,5,9,6,4,5,5,1,4,0,7,2,8,3,1,5,2,6,3,3,9,3,9,9,3,
		        5,2,2,2,9,7,0,1,7,0,7,2,2,2,4,5,3,1,0,8,2,4,4,8,9,5,7,7,1,8,6,4,5,3,8,5,5,8,6,2,8,3,7,7,1,2,8,7,3,9,0,5,1,1,
		        2,8,0,0,9,9,1,2,5,8,2,2,5,4,4,9,4,8,8,3,9,1,2,0,0,9,1,5,5,7,4,6,4,8,1,1,2,6,8,7,7,1,3,6,6,0,8,4,8,4,8,8,4,6,
		        0,9,5,6,1,4,4,0,4,9,4,9,6,3,8,8,6,7,4,4,5,7,1,0,8,0,4,1,5,1,2,7,3,8,5,7,6,1,0,9,3,7,8,9,5,2,3,4,3,9,1,4,7,3,
		        2,4,7,3,4,8,9,9,7,7,2,7,1,9,9,4,1,1,6,3,2,1,8,2,5,6,7,0,4,9,8,4,0,0,8,7,5,4,0,9,4,0,3,3,4,1,2,9,0,8,7,1,9,8,
		        8,0,9,7,0,2,1,1,3,1,4,3,6,4,5,6,3,3,1,6,2,8,2,3,0,9,0,1,8,2,0,8,0,3,3,1,1,4,0,5,6,4,1,0,9,3,0,3,8,5,6,2,7,9,
		        5,6,5,2,4,3,4,4,5,2,7,5,9,3,8,0,2,6,9,8,5,8,6,5,3,1,4,0,3,6,1,6,6,3,7,4,7,2,4,7,7,0,3,6,8,5,7,2,6,7,9,6,3,2,
		        6,1,8,0,3,4,4,0,5,4,5,9,4,4,4,0,3,0,5,2,1,1,1,2,4,4,5,5,1,9,6,4,5,0,4,8,8,4,5,9,9,7,1,0,9,0,1,1,3,9,7,3,2,9,
		        6,5,4,1,2,5,3,3,7,8,8,2,6,5,0,4,6,1,8,9,2,6,3,7,0,8,3,5,1,9,6,9,0,1,0,1,6,9,8,4,1,3,1,1,9,4,9,4,6,7,0,6,5,9,
		        6,7,5,6,4,8,5,9,5,2,8,6,0,0,4,7,3,7,2,4,5,5,7,1,0,5,8,9,4,9,5,6,4,5,3,5,2,3,3,7,7,5,7,9,5,9,4,4,4,5,1,7,2,3,
		        3,3,5,4,2,3,4,3,9,8,8,0,2,6,4,6,2,0,9,1,7,3,6,5,8,0,6,6,1,3,9,9,7,0,3,6,6,7,3,8,9,1,8,6,5,9,2,5,0,7,9,3,4,0,
		        8,7,0,3,4,4,2,6,1,1,6,5,6,6,6,2,5,3,8,7,1,2,4,2,7,8,9,7,5,0,4,0,7,9,4,3,7,2,1,7,2,4,1,2,6,7,4,7,3,1,9,3,8,0,
		        5,8,9,3,7,4,8,6,6,0,2,4,4,0,1,0,5,0,5,4,6,7,5,7,2,9,8,8,9,2,7,4,5,4,9,6,2,4,7,5,4,6,0,8,1,5,0,0,9,2,8,2,2,3,
		        0,1,5,8,7,6,4,7,3,1,5,6,4,0,5,8,2,6,8,6,8,5,5,4,1,5,0,4,7,8,3,3,5,0,1,3,6,3,1,4,0,0,8,3,1,3,7,9,8,5,9,6,9,3,
		        1,6,2,2,0,2,6,4,5,8,4,8,7,4,4,0,8,8,6,8,6,4,8,7,6,4,4,3,1,3,5,8,7,6,7,3,6,6,5,9,5,6,9,3,1,7,3,5,5,7,6,3,9,0,
		        7,1,3,8,4,2,1,0,9,4,3,3,1,6,5,4,5,7,1,5,9,2,1,7,7,3,8,4,1,6,6,8,6,4,7,2,9,5,8,5,7,3,2,1,8,4,3,7,3,0,5,0,3,1,
		        0,7,3,1,3,6,4,9,9,7,5,7,9,2,1,0,9,0,8,6,5,9,1,1,5,8,5,3,1,3,3,8,1,2,3,1,9,1,2,3,4,4,3,6,1,1,8,8,1,8,7,5,5,9,
		        5,8,7,8,6,2,4,6,3,2,8,4,7,4,4,0,0,3,0,6,6,9,0,4,4,3,0,1,1,4,1,1,9,3,8,0,1,6,9,9,0,3,4,6,6,1,9,4,4,1,1,2,3,5,
		        0,4,4,4,9,1,5,7,4,6,5,3,9,4,8,2,0,7,4,2,4,3,1,3,1,9,6,9,0,0,8,9,0,6,7,5,0,8,7,9,7,3,7,7,2,1,1,0,3,1,2,6,9,3,
		        9,4,5,5,4,6,4,6,0,6,0,8,0,5,6,1,3,4,4,3,9,5,1,8,4,1,9,9,1,4,4,1,5,7,6,6,6,8,9,4,2,6,7,8,0,1,9,8,7,2,5,6,9,5,
		        0,8,1,6,6,9,3,1,7,0,8,6,6,2,5,4,1,7,6,0,7,9,8,7,9,3,4,0,3,9,1,0,1,2,5,0,2,0,7,2,4,3,2,7,9,1,8,8,4,9,0,8,5,7,
		        8,2,7,5,3,5,5,2,7,8,0,1,9,8,9,8,8,3,7,1,1,7,2,4,9,5,6,7,8,1,8,9,5,6,1,5,5,4,0,0,0,0,5,3,1,9,8,5,2,4,0,0,3,4,
		        3,7,1,6,9,0,4,3,6,3,5,1,3,9,8,0,4,3,0,6,8,8,8,3,4,1,9,6,7,4,9,4,0,9,1,0,3,4,1,6,4,8,3,7,3,5,3,1,3,3,4,1,3,2,
		        5,9,7,5,1,4,7,5,2,1,5,8,4,9,1,2,7,3,9,3,9,8,5,4,3,6,6,5,6,6,2,3,7,2,4,9,6,0,6,0,7,0,3,0,8,3,3,9,9,5,5,8,5,4,
		        3,8,0,8,1,8,8,0,0,8,0,0,2,7,4,4,9,4,5,4,1,7,5,6,5,9,2,8,6,6,4,7,3,0,1,5,6,1,3,1,4,9,2,6,7,5,9,0,2,3,8,4,9,7,
		        5,3,8,4,7,9,2,2,0,1,7,5,8,0,7,4,5,3,3,1,8,5,1,0,6,0,9,8,1,3,2,8,5,4,4,2,9,7,9,5,5,0,2,3,0,5,2,6,6,8,0,5,9,2,
		        5,6,6,3,2,2,4,8,2,6,8,1,2,8,0,0,2,3,0,1,3,6,6,5,2,3,6,6,0,8,3,8,7,7,1,4,4,2,7,5,7,1,4,8,0,0,3,8,9,1,2,7,1,6,
		        4,4,7,8,4,5,3,5,3,7,0,9,8,8,5,6,4,3,7,2,3,8,8,9,4,4,7,3,5,0,5,6,6,9,3,6,9,4,8,1,6,9,3,0,4,3,0,8,3,7,9,6,5,7,
		        3,8,7,6,8,6,5,6,5,5,0,8,9,7,8,6,7,5,0,4,6,6,6,0,8,0,9,8,9,5,4,8,6,9,8,3,5,8,9,7,6,6,1,6,5,8,2,6,6,0,5,7,0,6,
		        3,3,4,5,7,8,6,5,9,6,4,9,5,2,3,1,8,1,4,9,1,8,1,4,8,2,9,7,2,5,7,8,6,3,7,9,3,5,3,9,0,9,9,4,0,8,0,5,2,3,8,9,7,0,
		        5,4,3,4,0,4,1,1,7,3,0,1,2,3,5,7,7,9,2,3,1,1,1,9,8,9,0,4,3,1,1,8,5,9,7,4,5,9,3,6,4,1,9,9,2,1,8,3,7,8,2,2,7,2,
		        8,0,4,1,3,2,8,0,7,1,2,4,4,9,6,7,1,9,8,0,7,2,7,0,8,0,0,9,0,7,5,0,8,6,0,9,8,1,8,1,2,7,3,6,1,1,2,6,6,3,8,0,2,2,
		        8,8,3,0,1,3,4,8,0,0,5,5,8,8,0,1,1,0,7,3,0,2,1,7,5,3,2,3,8,4,7,0,2,6,9,4,1,6,2,6,9,7,3,4,4,7,0,4,5,1,8,4,2,8,8,2,0};
		MatrixUtil matrixUtil = new MatrixUtil();
		matrixUtil.test(num, 5, 20,100);
	}
	
	public void test(int[] num,int how,int k,int testNum){
		int total = 0;
		for (int i = testNum; i >= 0; i--) {
			int[] dest = new int[num.length - i];
			System.arraycopy(num, 0, dest, 0, dest.length);//src:源数组 ,srcPos:源数组要复制的起始位置,dest:目的数组,destPos:目的数组放置的起始位置,length:要复制的长度
			Map<Integer, Integer> next = getNextMaybe(dest, how, k);
			int n = 0;
			for (Entry<Integer, Integer> j : next.entrySet()) {
				n = j.getKey();
				break;
			}
			if (i > 0) {
				int shiji = num[num.length - i];
				if (n == shiji) {
					total++;
				}				
			}
		}
		System.out.println((float)total / testNum);
	}
	
	/**
	 * getNextMaybe:(获取下一个可能的数字)
	 * @author lixingfa
	 * @date 2018年12月28日下午4:16:59
	 * @param num 已知的数据列
	 * @param how 比较的维度
	 * @param k 取前k个最相近的
	 * @return Map<Integer, String> 前k个中，各数字可能出现的百分比
	 */
	public Map<Integer, Integer> getNextMaybe(int[] num,int how,int k){
		Object[] objects = arrayToGroupAndLables(num, how);//训练数据
		int[] now = new int[how];
		for (int i = 0,j = how; i < how; i++,j--) {
			now[i] = num[num.length - j];
		}
		return KNN(now, (int[][])objects[0], (int[])objects[1], k);
	}
	
	/**
	 * arrayToKnowAndResults:(将一段已知数字序列划分成训练数据中的已知数据和结果数据)
	 * @author lixingfa
	 * @date 2018年12月28日下午12:02:52
	 * @param num 已知数字序列
	 * @param how 训练数据的个数
	 * @return Object[] 返回[0]训练数据和[1]标签
	 */
	private Object[] arrayToGroupAndLables(int[] num,int how){
		int length = num.length - how;
		int[][] group = new int[length][how];
		int[] lables = new int[length];
		length = length - 1;
		how = how - 1;//避免观念上的错误
		for (int i = num.length - 2; i >= how; i--,length--) {
			for (int j = how,k = 0; j >= 0; j--,k++) {
				group[length][k] = num[i - j];
			}
			lables[length] = num[i + 1];
		}
		Object[] objects = new Object[2];
		objects[0] = group;
		objects[1] = lables;
		return objects;
	}
	
	/**
	 * getNearSort:(获取待测数据最可能结果的map)
	 * @author lixingfa
	 * @date 2018年12月26日下午3:10:26
	 * @param now 要预测的数据
	 * @param group 已知的数据
	 * @param lables 已知数据的结果
	 * @return Map<Double, Integer> key 与已知数据的距离，value 已知数据的结果
	 */
	private Map<Double, Integer> getNearSort(int[] now,int[][] group,int[] lables){
		Map<Double, Integer> sqrts = new HashMap<Double, Integer>();//装距离和结果的map 
		for (int i = 0;i < group.length;i++) {
			int[] t = group[i];
			//相减
			for (int j = 0; j < t.length; j++) {
				t[j] = t[j] - now[j];
			}			
			//平方
			for (int j = 0; j < t.length; j++) {
				t[j] = t[j] * t[j];
			}
			//求和
			double sum = 0;
			for (int j = 0; j < t.length; j++) {
				sum = sum + t[j];
			}
			//开方
			sum = Math.sqrt(sum) + i * 0.000000001;//避免结果一致时数据覆盖
			sqrts.put(sum, lables[i]);//装结果
		}
		//对结果map进行排序
		sqrts = MapUtil.sortMapByKey(sqrts);
		return sqrts;
	}
	
	/**
	 * KNN:(前K)
	 * @author lixingfa
	 * @date 2018年12月26日下午4:04:15
	 * @param now 要预测的数据
	 * @param group 已知的数据
	 * @param lables 已知数据的结果
	 * @param k 取前k个里出现最多的
	 * @return Map<Integer, Integer> 前k个结果里，各结果的统计情况
	 */
	private Map<Integer, Integer> KNN(int[] now,int[][] group,int[] lables,int k){
		Map<Double, Integer> sqrts = getNearSort(now, group, lables);
		int i = 0;
		Map<Integer, Integer> kResult = new HashMap<Integer, Integer>();
		for (Entry<Double, Integer> entry : sqrts.entrySet()) {
			if (i < k) {
				int v = entry.getValue();
				if (kResult.containsKey(v)) {
					kResult.put(v, kResult.get(v) + 1);
				}else {
					kResult.put(v, 1);					
				}
			}else {
				break;
			}
			i++;
		}
		//按值排序
		kResult = MapUtil.sortMapByValue(kResult);
		return kResult;
	}
}
